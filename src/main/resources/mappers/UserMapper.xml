<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dev.junpring.scribble.mappers.IUserMapper">
    <insert id="insertUserEmailVerificationCode"
            parameterType="dev.junpring.scribble.entities.member.UserEmailVerifyCodeEntity">
        INSERT INTO `scribble_member`.`user_email_verify_code` (`user_id`, `created_at`, `expires_at`,
                                                                `expired_flag`, `code`, `salt`)
        VALUES (#{userId}, #{createdAt}, #{expiresAt}, #{isExpired}, #{code}, #{salt})
    </insert>

    <insert id="insertSession"
            parameterType="dev.junpring.scribble.entities.member.SessionEntity">
        INSERT INTO `scribble_member`.`sessions`(`created_at`, `updated_at`, `expires_at`, `expired_flag`,
                                                 `keep_logged_in_flag`, `user_id`,
                                                 `key`, `ua`)
        VALUES (#{createdAt}, #{updatedAt}, #{expiresAt}, #{isExpired}, #{isKeepLoggedIn}, #{userId}, #{key}, #{ua})
    </insert>
    <insert id="insertUser"
            parameterType="dev.junpring.scribble.entities.member.UserEntity"
            useGeneratedKeys="true"
            keyColumn="id"
            keyProperty="id">
        INSERT INTO `scribble_member`.`user`
        (`email`,
         `password`,
         `nickname`,
         `contact`,
         `level`,
         `address_postal`,
         `address_primary`,
         `address_secondary`,
         `email_verified_flag`,
         `deleted_flag`,
         `suspended_flag`)
        VALUES (#{email},
                #{password},
                #{nickname},
                #{contact},
                #{level},
                #{addressPostal},
                #{addressPrimary},
                #{addressSecondary},
                #{isEmailVerified},
                #{isDeleted},
                #{isSuspended})
    </insert>

    <select id="selectUserCountByEmail"
            resultType="_int">
        SELECT COUNT(0)
        FROM `scribble_member`.`user`
        WHERE `email` = #{email}
    </select>

    <select id="selectUserCountByNickname"
            resultType="_int">
        SELECT COUNT(0)
        FROM `scribble_member`.`user`
        WHERE `nickname` = #{nickname}
    </select>

    <select id="selectUserCountByContact"
            resultType="_int">
        SELECT COUNT(0)
        FROM `scribble_member`.`user`
        WHERE `contact` = #{contact}
    </select>

    <select id="selectUser"
            parameterType="dev.junpring.scribble.entities.member.UserEntity"
            resultType="dev.junpring.scribble.entities.member.UserEntity">
        SELECT `id`                  AS `id`,
               `email`               AS `email`,
               `password`            AS `password`,
               `nickname`            AS `nickname`,
               `contact`             AS `contact`,
               level                 AS `level`,
               `address_postal`      AS `addressPostal`,
               `address_primary`     AS `addressPrimary`,
               `address_secondary`   AS `addressSecondary`,
               `email_verified_flag` AS `isEmailVerified`,
               `registered_at`       AS `registeredAt`,
               `modified_at`         AS `modifiedAt`,
               `deleted_flag`        AS `isDeleted`,
               `suspended_flag`      AS `isSuspended`
        FROM `scribble_member`.`user`
        WHERE email = #{email}
          AND `password` = #{password}
        LIMIT 1
    </select>

    <select id="selectUserEmail"
            resultType="dev.junpring.scribble.entities.member.UserEntity">
        SELECT `id`                  AS `id`,
               `email`               AS `email`,
               `password`            AS `password`,
               `nickname`            AS `nickname`,
               `contact`             AS `contact`,
               level                 AS `level`,
               `address_postal`      AS `addressPostal`,
               `address_primary`     AS `addressPrimary`,
               `address_secondary`   AS `addressSecondary`,
               `email_verified_flag` AS `isEmailVerified`,
               `registered_at`       AS `registeredAt`,
               `modified_at`         AS `modifiedAt`,
               `deleted_flag`        AS `isDeleted`,
               `suspended_flag`      AS `isSuspended`
        FROM `scribble_member`.`user`
        WHERE `email` = #{email}
        LIMIT 1
    </select>

    <select id="selectUserEmailEqualContact"
            resultType="dev.junpring.scribble.entities.member.UserEntity">
        SELECT `id`                  AS `id`,
               `email`               AS `email`,
               `password`            AS `password`,
               `nickname`            AS `nickname`,
               `contact`             AS `contact`,
               level                 AS `level`,
               `address_postal`      AS `addressPostal`,
               `address_primary`     AS `addressPrimary`,
               `address_secondary`   AS `addressSecondary`,
               `email_verified_flag` AS `isEmailVerified`,
               `registered_at`       AS `registeredAt`,
               `modified_at`         AS `modifiedAt`,
               `deleted_flag`        AS `isDeleted`,
               `suspended_flag`      AS `isSuspended`
        FROM `scribble_member`.`user`
        WHERE `email` = #{email}
          AND `contact` = #{contact}
        LIMIT 1
    </select>

    <select id="selectSessionKey"
            resultType="dev.junpring.scribble.entities.member.SessionEntity">
        SELECT `id`                  AS `id`,
               `created_at`          AS `createdAt`,
               `updated_at`          AS `updatedAt`,
               `expires_at`          AS `expiresAt`,
               `expired_flag`        AS `isExpired`,
               `keep_logged_in_flag` AS `isKeepLoggedIn`,
               `user_id`             AS `userId`,
               `key`                 AS `key`,
               `ua`                  AS `ua`
        FROM `scribble_member`.`sessions`
        WHERE `key` = #{key}
          AND `expires_at` > NOW()
          AND `expired_flag` = FALSE
        LIMIT 1
    </select>

    <select id="selectUserEmailVerificationCode"
            resultType="dev.junpring.scribble.entities.member.UserEmailVerifyCodeEntity">
        SELECT `id`           AS `id`,
               `user_id`      AS `userId`,
               `created_at`   AS `createdAt`,
               `expires_at`   AS `expiresAt`,
               `expired_flag` AS `isExpired`,
               `code`         AS `code`,
               `salt`         AS `salt`
        FROM `scribble_member`.`user_email_verify_code`
        WHERE `code` = #{code}
          AND `salt` = #{salt}
        LIMIT 1
    </select>

    <select id="selectUserById"
            resultType="dev.junpring.scribble.entities.member.UserEntity">
        SELECT `U`.`id`                  AS `id`,
               `U`.`email`               AS `email`,
               `U`.`password`            AS `password`,
               `U`.`nickname`            AS `nickname`,
               `U`.`contact`             AS `contact`,
               `U`.`level`               AS `level`,
               `L`.`text`                AS `levelText`,
               `U`.`address_postal`      AS `addressPostal`,
               `U`.`address_primary`     AS `addressPrimary`,
               `U`.`address_secondary`   AS `addressSecondary`,
               `U`.`email_verified_flag` AS `isEmailVerified`,
               `U`.`registered_at`       AS `registeredAt`,
               `U`.`modified_at`         AS `modifiedAt`,
               `U`.`modifyExpires_at`    AS `modifyExpiresAt`,
               `U`.`deleted_flag`        AS `isDeleted`,
               `U`.`suspended_flag`      AS `isSuspended`
        FROM `scribble_member`.`user` AS `U`
                 LEFT JOIN `scribble_member`.`user_levels` AS `L`
                           ON `L`.level = `U`.level
        WHERE `id` = #{id}
        LIMIT 1
    </select>

    <update id="updateUser"
            parameterType="dev.junpring.scribble.entities.member.UserEntity">
        UPDATE `scribble_member`.`user`
        SET `email`               = #{email},
            `password`            = #{password},
            `nickname`            = #{nickname},
            `contact`             = #{contact},
            `level`               = #{level},
            `address_postal`      = #{addressPostal},
            `address_primary`     = #{addressPrimary},
            `address_secondary`   = #{addressSecondary},
            `email_verified_flag` = #{isEmailVerified},
            `registered_at`       = #{registeredAt},
            `modified_at`         = #{modifiedAt},
            `deleted_flag`        = #{isDeleted},
            `suspended_flag`      = #{isSuspended}
        WHERE `id` = #{id}
        LIMIT 1
    </update>

    <update id="updateUserNickname"
            parameterType="dev.junpring.scribble.entities.member.UserEntity">
        UPDATE `scribble_member`.`user`
        SET `email`               = #{email},
            `password`            = #{password},
            `nickname`            = #{nickname},
            `contact`             = #{contact},
            `level`               = #{level},
            `address_postal`      = #{addressPostal},
            `address_primary`     = #{addressPrimary},
            `address_secondary`   = #{addressSecondary},
            `email_verified_flag` = #{isEmailVerified},
            `registered_at`       = #{registeredAt},
            `modified_at`         = #{modifiedAt},
            `modifyExpires_at`    = #{modifyExpiresAt},
            `deleted_flag`        = #{isDeleted},
            `suspended_flag`      = #{isSuspended}
        WHERE `id` = #{id}
          AND NOW() > `user`.`modifyExpires_at`
        LIMIT 1
    </update>
    <update id="updateUserEmailVerifyCode"
            parameterType="dev.junpring.scribble.entities.member.UserEmailVerifyCodeEntity">
        UPDATE `scribble_member`.`user_email_verify_code`
        SET `created_at`   = #{createdAt},
            `expires_at`   = #{expiresAt},
            `expired_flag` = #{isExpired},
            `code`         = #{code},
            `salt`         = #{salt},
            `user_id`      = #{userId}
        WHERE id = #{id}
        LIMIT 1
    </update>

    <update id="updateSession"
            parameterType="dev.junpring.scribble.entities.member.SessionEntity">
        UPDATE `scribble_member`.`sessions`
        SET `updated_at`   = #{updatedAt},
            `expires_at`   = #{expiresAt},
            `expired_flag` = #{isExpired}
        WHERE `key` = #{key}
        LIMIT 1
    </update>

    <update id="updateSession2"
            parameterType="dev.junpring.scribble.entities.member.SessionEntity">
        UPDATE `scribble_member`.`sessions`
        SET `updated_at`   = #{updatedAt},
            `expires_at`   = #{expiresAt},
            `expired_flag` = #{isExpired}
        WHERE `key` = #{key}
        LIMIT 1
    </update>

    <update id="updateSessionExpired">
        UPDATE `scribble_member`.`sessions`
        SET `expired_flag` = TRUE
        WHERE `user_id` = #{id}
          AND `expires_at` > NOW()
          AND expired_flag = FALSE
    </update>
    <!--    AND keep_logged_in_flag = FALSE;-->

    <!--updateSessionExpired
    3. expired_flag를 true로 set
    2. user_email과 @Param(value = "email") String email)로 받은 값과 같은 값을
    1. (조건) 만료시간이 현재시간 보다 크고 && `expired_flag`가 FALSE와 같을 시
    (expired_flag는 기본값이 false 이다.)
-->
</mapper>